Plan de Refactorización - Formulario de Avalúo

Objetivo: Mejorar el diseño de software del formulario de avalúo, aplicando principios SOLID y patrones de diseño para aumentar la mantenibilidad, cohesión y reducir el acoplamiento.

Subtareas:

1.  **Refactorizar `useAppraisalForm.ts`:**
    *   Extraer la lógica de envío del formulario (`handleSubmit`) a una función separada o un nuevo hook (`useAppraisalSubmission`). Esta nueva entidad se encargaría de la preparación de los datos (incluida la conversión de imágenes a Base64) y la llamada a la API.
    *   Considerar la creación de un servicio dedicado (`appraisalApiService`) para encapsular la llamada `fetch` al endpoint de recepción de datos. Esto seguiría el patrón ya establecido con `placesApiService`.
    *   Mantener `useAppraisalForm` enfocado en la gestión del estado del formulario, la validación (integrando Zod y validación de imágenes) y la orquestación de los hooks secundarios (`useImageHandler`, `useMaterialQualityEntries`).
    *   Revisar la gestión de errores para asegurar que sea consistente y centralizada, posiblemente manejando los errores de envío en el nuevo hook/servicio de envío.

2.  **Refactorizar `page.tsx`:**
    *   Descomponer el componente `AppraisalForm` en componentes más pequeños y especializados. Por ejemplo:
        *   `LocationFields`: Para los campos de departamento, ciudad y dirección.
        *   `PropertyDetailsFields`: Para área, estrato y tipo de inmueble.
        *   `ValueAndAdminFields`: Para valor esperado y administración.
        *   `ImageUploadSection`: Para la carga y previsualización de imágenes.
        *   `MaterialQualitySection`: Para la gestión dinámica de entradas de calidad de materiales.
    *   Abstraer la lógica de visualización de errores de campo individual en un componente helper o un patrón consistente para reducir la repetición de código JSX.
    *   Simplificar el componente `AppraisalForm` principal para que se centre principalmente en componer estos subcomponentes y pasarles los datos y handlers necesarios desde `useAppraisalForm`.

3.  **Revisar y ajustar la validación:**
    *   Asegurar que la validación de Zod y la validación de imágenes se integren de manera fluida y que los mensajes de error se muestren correctamente en la UI a través de los componentes refactorizados.

4.  **Pruebas Unitarias:**
    *   Generar pruebas unitarias para los hooks refactorizados (`useAppraisalForm`, `useAppraisalSubmission`, `useImageHandler`, `useMaterialQualityEntries`) para asegurar que la lógica de estado, validación y manejo de datos funcione correctamente de forma aislada.
    *   Generar pruebas de integración para verificar que los componentes refactorizados interactúen correctamente con los hooks.

5.  **Refactorización Adicional (Opcional/Futuro):**
    *   Explorar si la lógica de manejo de errores a nivel de formulario podría beneficiarse de un contexto de React o un hook de manejo de errores más genérico si la aplicación crece y esta necesidad se repite.

Este plan proporciona una hoja de ruta clara para mejorar la estructura y el diseño del código del formulario de avalúo.